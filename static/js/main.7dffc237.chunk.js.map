{"version":3,"sources":["components/Post.js","components/NumberButton.js","components/OperatorButton.js","App.js","components/Result.js","serviceWorker.js","index.js"],"names":["React","Component","NumberButton","props","onClick","numberBtnClickHandler","num","OperatorButton","operatorBtnClickHandler","operator","App","state","numberField","numberField2","left","display","buttons","operations","e","setState","target","textContent","ClearBtnClickHandler","solve","console","log","className","this","output","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8OAEmBA,IAAMC,UCMVC,MALf,SAAsBC,GAClB,OACI,4BAAQC,QAASD,EAAME,uBAAwBF,EAAMG,MCE9CC,MALf,SAAwBJ,GAChB,OACI,4BAAQC,QAASD,EAAMK,yBAA0BL,EAAMM,WC4GlDC,GC9GIV,IAAMC,U,4MDazBU,MAAQ,CACNC,YAAa,GACbH,SAAU,GACVI,aAAc,GACdC,KAAM,GACNC,QAAS,I,EAGXC,QAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,G,EACtCC,WAAa,CAAC,IAAK,IAAK,IAAK,K,EAE7BZ,sBAAwB,SAACa,GACvB,EAAKC,SAAS,CACZP,YAAa,EAAKD,MAAMC,YAAcM,EAAEE,OAAOC,e,EAInDC,qBAAuB,SAACJ,GACtB,EAAKC,SAAS,CACZP,YAAa,GACbH,SAAU,GACVI,aAAc,GACdC,KAAM,GACNC,QAAS,M,EAIbP,wBAA0B,SAACU,GACzB,EAAKC,SAAS,CACZV,SAAUS,EAAEE,OAAOC,YACnBP,KAAM,EAAKH,MAAMC,YACjBA,YAAa,GACbG,QAAS,EAAKJ,MAAMI,QAAU,EAAKJ,MAAMC,YAAcM,EAAEE,OAAOC,cAElE,EAAKE,S,EAGPA,MAAQ,WACN,IAAIjB,EAEJ,OADAkB,QAAQC,IAAI,EAAKd,MAAMF,UAChB,EAAKE,MAAMF,UAChB,IAAK,IACHH,EAAsB,EAAhB,EAAKK,MAAMG,KAAgC,EAAvB,EAAKH,MAAMC,YACrCY,QAAQC,IAAI,EAAKd,MAAMG,KAAM,EAAKH,MAAMC,aAC1C,MACA,IAAK,IACHN,EAAsB,EAAhB,EAAKK,MAAMG,KAAgC,EAAvB,EAAKH,MAAMC,YACrC,MACF,IAAK,IACHN,EAAsB,EAAhB,EAAKK,MAAMG,KAAS,EAAKH,MAAMC,YAAY,EACjD,MACF,IAAK,IACHN,EAAsB,EAAhB,EAAKK,MAAMG,KAAS,EAAKH,MAAMC,YAAY,EACjD,MACF,QACE,MAAO,QAET,EAAKO,SAAS,CACZL,KAAMR,K,uDAID,IAAD,OACN,OACE,yBAAKoB,UAAU,OACb,4BAAQA,UAAU,cACd,0CACaC,KAAKhB,MAAMF,SAAS,6BADjC,iBAEiBkB,KAAKhB,MAAMC,YAAY,6BAFxC,SAGSe,KAAKhB,MAAMG,KAAK,6BAHzB,WAIWa,KAAKhB,MAAMiB,OAAO,8BAE7B,yCACYD,KAAKhB,MAAMI,SAEvB,6BAEMY,KAAKX,QAAQa,KAAK,SAACvB,GACjB,OAAO,kBAAC,EAAD,CAAcD,sBAAuB,EAAKA,sBAAuBC,IAAKA,QAIrF,6BAEMqB,KAAKV,WAAWY,KAAK,SAACpB,GACpB,OAAO,kBAAC,EAAD,CAAgBD,wBAAyB,EAAKA,wBAAyBC,SAAUA,OAG1F,4BAAQL,QAASuB,KAAKJ,OAAtB,KACA,4BAAQnB,QAASuB,KAAKL,sBAAtB,gB,GA1FFtB,IAAMC,YEFJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.7dffc237.chunk.js","sourcesContent":["import React from 'react';\n\nclass Post extends React.Component {\n    render() {\n        return(\n            <p>{this.props.post.text} by {this.props.post.author}</p>\n        );\n    }\n}\n\nexport default Post;","import React from 'react';\n\n\nfunction NumberButton(props) {\n    return(\n        <button onClick={props.numberBtnClickHandler}>{props.num}</button>\n    )}\n\nexport default NumberButton;\n\n","import React from 'react';\n\nfunction OperatorButton(props) {\n        return(\n            <button onClick={props.operatorBtnClickHandler}>{props.operator}</button>\n        )}\n\nexport default OperatorButton;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n// import HelloWorld from './components/HelloWorld.js'\n// import Menu from './components/Menu';\n// import ScoreWidget from './components/ScoreWidget';\n// import NameTag from './components/NameTag';\nimport Post from './components/Post';\n// import DataBinding from './components/DataBinding';\nimport NumberButton from './components/NumberButton';\nimport OperatorButton from './components/OperatorButton';\nimport Result from './components/Result';\n\n\nclass App extends React.Component {\n  state = {\n    numberField: '',\n    operator: '',\n    numberField2: '',\n    left: '',\n    display: ''\n  }\n  \n  buttons = [1, 2, 3, 4, 5, 6, 7, 8 ,9, 0];\n  operations = ['+', '-', 'x', '/'];\n\n  numberBtnClickHandler = (e) => {\n    this.setState({\n      numberField: this.state.numberField + e.target.textContent\n    })\n  }\n\n  ClearBtnClickHandler = (e) => {\n    this.setState({\n      numberField: '',\n      operator: '',\n      numberField2: '',\n      left: '',\n      display: ''\n    })\n  }\n\n  operatorBtnClickHandler = (e) => {\n    this.setState({\n      operator: e.target.textContent,\n      left: this.state.numberField,\n      numberField: '',\n      display: this.state.display + this.state.numberField + e.target.textContent\n    })\n    this.solve();\n  }\n\n  solve = () => {\n    let num;\n    console.log(this.state.operator);\n    switch(this.state.operator) {\n      case '+':\n        num = this.state.left*1 + this.state.numberField*1;\n        console.log(this.state.left, this.state.numberField);\n      break;\n      case '-':\n        num = this.state.left*1 - this.state.numberField*1;\n        break;\n      case 'x':\n        num = this.state.left*1 * this.state.numberField*1;\n        break;\n      case '/':\n        num = this.state.left*1 / this.state.numberField*1;\n        break;\n      default:\n        return \"Error\";\n    }\n      this.setState({\n        left: num,\n      })\n  }\n\n    render(){\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n              <div>\n                operator: {this.state.operator}<br/>\n                numberField1: {this.state.numberField}<br/>\n                left: {this.state.left}<br/>\n                output: {this.state.output}<br/>\n              </div>\n              <div>\n                display: {this.state.display}\n              </div>\n              <div>\n                  {\n                    this.buttons.map( (num) => {\n                      return <NumberButton numberBtnClickHandler={this.numberBtnClickHandler} num={num}/>\n                    })\n                  }\n              </div>\n              <div>\n                  {\n                    this.operations.map( (operator) => {\n                      return <OperatorButton operatorBtnClickHandler={this.operatorBtnClickHandler} operator={operator}/>\n                    })\n                  }\n                    <button onClick={this.solve}>=</button>\n                    <button onClick={this.ClearBtnClickHandler}>Clear</button>\n              </div>\n          </header>\n        </div>\n      );\n    }\n  }\n  \n  export default App;\n\n  // this.state({\n  //   input: event.e.target.value,\n  //   firstName: e.target.value\n  // });\n\n//   state = {\n//     text: 'Welcome',\n//     firstName: '',\n//     lastName: '',\n//   }\n\n//     firstNameChangeHandler = (e) => {\n//       this.setState({\n//         firstName: e.target.value,\n//       });\n//     }\n//     lastNameChangeHandler = (e) => {\n//       this.setState({\n//         lastName: e.target.value,\n//       })\n//     }\n\n//   render() {\n//     return (\n//       <div className=\"App\">\n//           <header className=\"App-header\">\n//               <input type=\"text\" onChange={this.firstNameChangeHandler}/>\n//               <input type=\"text\" onChange={this.lastNameChangeHandler}/>\n//               <button onClick={this.submitClickHandler}>Submit</button>\n//               <button >Reset</button>\n//               <div> {this.state.text} {this.state.firstName} {this.state.lastName}</div>\n//             </header>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n\n\n\n// class App extends React.Component {\n//   state = {\n//     numberField: \"\",\n//     operator: \"\",\n//     left: \"\",\n//     output: \"\"\n//   }\n//   buttons = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];\n//   operators = [\"+\", \"-\", \"x\", \"/\"];\n//   numberBtnClickHandler = (e) => {\n//     this.setState({\n//       numberField: this.state.numberField + e.target.textContent\n//     })\n//   }\n//   operatorClickHandler = (e) => {\n//     this.setState({\n//       operator: e.target.textContent,\n//       left: this.state.numberField,\n//       numberField: \"\"\n//     })\n//     this.solve()\n//   }\n//   solve = () => {\n//     let num;\n//     switch(this.state.operator) {\n//       case \"+\":\n//         num = this.state.left*1 + this.state.numberField*1;\n//         break;\n//       case \"-\":\n//         num = this.state.left*1 - this.state.numberField*1;\n//         break;\n//       case \"x\":\n//         num = this.state.left*1 * this.state.numberField*1;\n//         break;\n//       case \"/\":\n//         num = this.state.left*1 / this.state.numberField*1;\n//         break;\n//       default:\n//         return \"Handle an error\";\n//     }\n//     this.setState({\n//       left: num\n//     })\n//   }\n//   render() {\n//     return(\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <div>\n//             Operator: {this.state.operator} <br/>\n//             Number: {this.state.numberField} <br/>\n//             Left: {this.state.left}\n//           </div>\n//           <div>\n//             {\n//               this.buttons.map( (num) => {\n//                 return <button onClick={this.numberBtnClickHandler}>{num}</button>\n//               })\n//             }\n//           </div>\n//           <div>\n//             {\n//               this.operators.map( (operation) => {\n//                 return <button onClick={this.operatorClickHandler}>{operation}</button>\n//               })\n//             }\n//             <button onClick={this.solve}>=</button>\n//           </div>\n//         </header>\n//       </div>\n//     )\n//   }\n// }\n// export default App;\n\n\n\n","import React from 'react';\n\nclass Result extends React.Component {\n    render() {\n        return(\n            <p>{this.props.post.text} by {this.props.post.author}</p>\n        );\n    }\n}\n\nexport default Result;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}